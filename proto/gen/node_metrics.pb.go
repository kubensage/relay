// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: proto/node_metrics.proto

package gen

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// NodeMetrics aggregates system-level metrics and metadata for the node where the agent is running.
// It includes hardware information, OS/kernel metadata, CPU and memory usage, PSI pressure stats,
// and network interface details.
type NodeMetrics struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Hostname of the node (as reported by the OS).
	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// Primary IPv4
	PrimaryIpv4 *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=primary_ipv4,json=primaryIpv4,proto3" json:"primary_ipv4,omitempty"`
	// Primary IPv6
	PrimaryIpv6 *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=primary_ipv6,json=primaryIpv6,proto3" json:"primary_ipv6,omitempty"`
	// Time since last boot (in seconds).
	Uptime uint64 `protobuf:"varint,5,opt,name=uptime,proto3" json:"uptime,omitempty"`
	// System boot timestamp (in seconds since epoch).
	BootTime uint64 `protobuf:"varint,6,opt,name=boot_time,json=bootTime,proto3" json:"boot_time,omitempty"`
	// Number of running processes on the system.
	Procs uint64 `protobuf:"varint,7,opt,name=procs,proto3" json:"procs,omitempty"`
	// Name of the operating system (e.g., "linux").
	Os string `protobuf:"bytes,8,opt,name=os,proto3" json:"os,omitempty"`
	// Platform identifier (e.g., "ubuntu", "centos").
	Platform string `protobuf:"bytes,9,opt,name=platform,proto3" json:"platform,omitempty"`
	// Platform family (e.g., "debian", "rhel").
	PlatformFamily string `protobuf:"bytes,10,opt,name=platform_family,json=platformFamily,proto3" json:"platform_family,omitempty"`
	// Version of the platform (e.g., "20.04").
	PlatformVersion string `protobuf:"bytes,11,opt,name=platform_version,json=platformVersion,proto3" json:"platform_version,omitempty"`
	// Kernel version (e.g., "5.15.0-89-generic").
	KernelVersion string `protobuf:"bytes,12,opt,name=kernel_version,json=kernelVersion,proto3" json:"kernel_version,omitempty"`
	// Kernel architecture (e.g., "x86_64").
	KernelArch string `protobuf:"bytes,13,opt,name=kernel_arch,json=kernelArch,proto3" json:"kernel_arch,omitempty"`
	// Unique identifier for the host (as reported by the system, usually from DMI or machine-id).
	HostId string `protobuf:"bytes,14,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	// Aggregated CPU usage percentage across all logical CPUs over the last sampling interval.
	TotalCpuPercentage float64 `protobuf:"fixed64,15,opt,name=total_cpu_percentage,json=totalCpuPercentage,proto3" json:"total_cpu_percentage,omitempty"`
	// Detailed metrics and metadata for each logical CPU on the node.
	CpuInfos []*CpuInfo `protobuf:"bytes,16,rep,name=cpu_infos,json=cpuInfos,proto3" json:"cpu_infos,omitempty"`
	// Total system memory in bytes.
	TotalMemory uint64 `protobuf:"varint,17,opt,name=total_memory,json=totalMemory,proto3" json:"total_memory,omitempty"`
	// Available memory in bytes (free + buffers/cache).
	AvailableMemory uint64 `protobuf:"varint,18,opt,name=available_memory,json=availableMemory,proto3" json:"available_memory,omitempty"`
	// Used memory in bytes (total - available).
	UsedMemory uint64 `protobuf:"varint,19,opt,name=used_memory,json=usedMemory,proto3" json:"used_memory,omitempty"`
	// Percentage of memory used (used / total * 100).
	MemoryUsedPerc float64 `protobuf:"fixed64,20,opt,name=memory_used_perc,json=memoryUsedPerc,proto3" json:"memory_used_perc,omitempty"`
	// Aggregated network usage statistics across all network interfaces.
	NetUsage *NetUsage `protobuf:"bytes,21,opt,name=net_usage,json=netUsage,proto3" json:"net_usage,omitempty"`
	// Top N processes consuming the most resident memory (RSS) on the node,
	// sorted in descending order. Useful for identifying high-memory workloads.
	ProcessesMemInfo []*ProcessMemInfo `protobuf:"bytes,22,rep,name=processes_mem_info,json=processesMemInfo,proto3" json:"processes_mem_info,omitempty"`
	// Disk usage statistics for all mounted file systems on the node,
	// including capacity, free/used space, and file system type.
	DiskUsages []*DiskUsage `protobuf:"bytes,24,rep,name=disk_usages,json=diskUsages,proto3" json:"disk_usages,omitempty"`
	// Aggregated disk I/O statistics for the entire node.
	DiskIoSummary *DiskIOSummary `protobuf:"bytes,25,opt,name=disk_io_summary,json=diskIoSummary,proto3" json:"disk_io_summary,omitempty"`
	// Pressure stall information for CPU-related resource contention.
	PsiCpuMetrics *PsiMetrics `protobuf:"bytes,26,opt,name=psi_cpu_metrics,json=psiCpuMetrics,proto3" json:"psi_cpu_metrics,omitempty"`
	// Pressure stall information for memory-related resource contention.
	PsiMemoryMetrics *PsiMetrics `protobuf:"bytes,27,opt,name=psi_memory_metrics,json=psiMemoryMetrics,proto3" json:"psi_memory_metrics,omitempty"`
	// Pressure stall information for I/O-related resource contention.
	PsiIoMetrics *PsiMetrics `protobuf:"bytes,28,opt,name=psi_io_metrics,json=psiIoMetrics,proto3" json:"psi_io_metrics,omitempty"`
	// List of all network interfaces present on the node, including their metadata and IPs.
	NetworkInterfaces []*InterfaceStat `protobuf:"bytes,29,rep,name=network_interfaces,json=networkInterfaces,proto3" json:"network_interfaces,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *NodeMetrics) Reset() {
	*x = NodeMetrics{}
	mi := &file_proto_node_metrics_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeMetrics) ProtoMessage() {}

func (x *NodeMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_proto_node_metrics_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeMetrics.ProtoReflect.Descriptor instead.
func (*NodeMetrics) Descriptor() ([]byte, []int) {
	return file_proto_node_metrics_proto_rawDescGZIP(), []int{0}
}

func (x *NodeMetrics) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *NodeMetrics) GetPrimaryIpv4() *wrapperspb.StringValue {
	if x != nil {
		return x.PrimaryIpv4
	}
	return nil
}

func (x *NodeMetrics) GetPrimaryIpv6() *wrapperspb.StringValue {
	if x != nil {
		return x.PrimaryIpv6
	}
	return nil
}

func (x *NodeMetrics) GetUptime() uint64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *NodeMetrics) GetBootTime() uint64 {
	if x != nil {
		return x.BootTime
	}
	return 0
}

func (x *NodeMetrics) GetProcs() uint64 {
	if x != nil {
		return x.Procs
	}
	return 0
}

func (x *NodeMetrics) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *NodeMetrics) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *NodeMetrics) GetPlatformFamily() string {
	if x != nil {
		return x.PlatformFamily
	}
	return ""
}

func (x *NodeMetrics) GetPlatformVersion() string {
	if x != nil {
		return x.PlatformVersion
	}
	return ""
}

func (x *NodeMetrics) GetKernelVersion() string {
	if x != nil {
		return x.KernelVersion
	}
	return ""
}

func (x *NodeMetrics) GetKernelArch() string {
	if x != nil {
		return x.KernelArch
	}
	return ""
}

func (x *NodeMetrics) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *NodeMetrics) GetTotalCpuPercentage() float64 {
	if x != nil {
		return x.TotalCpuPercentage
	}
	return 0
}

func (x *NodeMetrics) GetCpuInfos() []*CpuInfo {
	if x != nil {
		return x.CpuInfos
	}
	return nil
}

func (x *NodeMetrics) GetTotalMemory() uint64 {
	if x != nil {
		return x.TotalMemory
	}
	return 0
}

func (x *NodeMetrics) GetAvailableMemory() uint64 {
	if x != nil {
		return x.AvailableMemory
	}
	return 0
}

func (x *NodeMetrics) GetUsedMemory() uint64 {
	if x != nil {
		return x.UsedMemory
	}
	return 0
}

func (x *NodeMetrics) GetMemoryUsedPerc() float64 {
	if x != nil {
		return x.MemoryUsedPerc
	}
	return 0
}

func (x *NodeMetrics) GetNetUsage() *NetUsage {
	if x != nil {
		return x.NetUsage
	}
	return nil
}

func (x *NodeMetrics) GetProcessesMemInfo() []*ProcessMemInfo {
	if x != nil {
		return x.ProcessesMemInfo
	}
	return nil
}

func (x *NodeMetrics) GetDiskUsages() []*DiskUsage {
	if x != nil {
		return x.DiskUsages
	}
	return nil
}

func (x *NodeMetrics) GetDiskIoSummary() *DiskIOSummary {
	if x != nil {
		return x.DiskIoSummary
	}
	return nil
}

func (x *NodeMetrics) GetPsiCpuMetrics() *PsiMetrics {
	if x != nil {
		return x.PsiCpuMetrics
	}
	return nil
}

func (x *NodeMetrics) GetPsiMemoryMetrics() *PsiMetrics {
	if x != nil {
		return x.PsiMemoryMetrics
	}
	return nil
}

func (x *NodeMetrics) GetPsiIoMetrics() *PsiMetrics {
	if x != nil {
		return x.PsiIoMetrics
	}
	return nil
}

func (x *NodeMetrics) GetNetworkInterfaces() []*InterfaceStat {
	if x != nil {
		return x.NetworkInterfaces
	}
	return nil
}

// ProcessMemInfo represents basic memory usage statistics for a single process.
// Used to report the most memory-intensive processes on the node.
type ProcessMemInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Process ID (PID).
	Pid int32 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	// Executable name of the process.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Resident memory usage in bytes (RSS).
	Memory        uint64 `protobuf:"varint,3,opt,name=memory,proto3" json:"memory,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProcessMemInfo) Reset() {
	*x = ProcessMemInfo{}
	mi := &file_proto_node_metrics_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessMemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessMemInfo) ProtoMessage() {}

func (x *ProcessMemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_node_metrics_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessMemInfo.ProtoReflect.Descriptor instead.
func (*ProcessMemInfo) Descriptor() ([]byte, []int) {
	return file_proto_node_metrics_proto_rawDescGZIP(), []int{1}
}

func (x *ProcessMemInfo) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *ProcessMemInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProcessMemInfo) GetMemory() uint64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

// CpuInfo provides metadata and real-time usage for a single logical CPU (hardware thread).
// Logical CPUs are grouped into cores and physical sockets (CPUs).
type CpuInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Model name of the processor (e.g., "Intel(R) Core(TM) i9-10900K CPU @ 3.70GHz").
	Model string `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	// Number of physical cores reported for the CPU. May be duplicated across logical threads.
	Cores int32 `protobuf:"varint,2,opt,name=cores,proto3" json:"cores,omitempty"`
	// Clock speed in MHz.
	Mhz int32 `protobuf:"varint,3,opt,name=mhz,proto3" json:"mhz,omitempty"`
	// Vendor identifier (e.g., "GenuineIntel", "AuthenticAMD").
	VendorId string `protobuf:"bytes,4,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id,omitempty"`
	// Identifier of the physical CPU socket.
	PhysicalId string `protobuf:"bytes,5,opt,name=physical_id,json=physicalId,proto3" json:"physical_id,omitempty"`
	// Identifier of the core within the physical socket.
	CoreId string `protobuf:"bytes,6,opt,name=core_id,json=coreId,proto3" json:"core_id,omitempty"`
	// Logical CPU/thread ID as reported by the OS.
	Cpu int32 `protobuf:"varint,7,opt,name=cpu,proto3" json:"cpu,omitempty"`
	// Percentage of time this logical CPU was actively executing instructions over the sampling interval (e.g., 1s).
	Usage         float64 `protobuf:"fixed64,8,opt,name=usage,proto3" json:"usage,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CpuInfo) Reset() {
	*x = CpuInfo{}
	mi := &file_proto_node_metrics_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CpuInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CpuInfo) ProtoMessage() {}

func (x *CpuInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_node_metrics_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CpuInfo.ProtoReflect.Descriptor instead.
func (*CpuInfo) Descriptor() ([]byte, []int) {
	return file_proto_node_metrics_proto_rawDescGZIP(), []int{2}
}

func (x *CpuInfo) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *CpuInfo) GetCores() int32 {
	if x != nil {
		return x.Cores
	}
	return 0
}

func (x *CpuInfo) GetMhz() int32 {
	if x != nil {
		return x.Mhz
	}
	return 0
}

func (x *CpuInfo) GetVendorId() string {
	if x != nil {
		return x.VendorId
	}
	return ""
}

func (x *CpuInfo) GetPhysicalId() string {
	if x != nil {
		return x.PhysicalId
	}
	return ""
}

func (x *CpuInfo) GetCoreId() string {
	if x != nil {
		return x.CoreId
	}
	return ""
}

func (x *CpuInfo) GetCpu() int32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *CpuInfo) GetUsage() float64 {
	if x != nil {
		return x.Usage
	}
	return 0
}

// NetUsage aggregates cumulative network statistics across all interfaces.
// Useful for identifying total traffic, errors, and dropped packets on the node.
type NetUsage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Total number of bytes sent.
	TotalBytesSent uint64 `protobuf:"varint,1,opt,name=total_bytes_sent,json=totalBytesSent,proto3" json:"total_bytes_sent,omitempty"`
	// Total number of bytes received.
	TotalBytesReceived uint64 `protobuf:"varint,2,opt,name=total_bytes_received,json=totalBytesReceived,proto3" json:"total_bytes_received,omitempty"`
	// Total number of packets sent.
	TotalPacketsSent uint64 `protobuf:"varint,3,opt,name=total_packets_sent,json=totalPacketsSent,proto3" json:"total_packets_sent,omitempty"`
	// Total number of packets received.
	TotalPacketsReceived uint64 `protobuf:"varint,4,opt,name=total_packets_received,json=totalPacketsReceived,proto3" json:"total_packets_received,omitempty"`
	// Total inbound packet errors.
	TotalErrIn uint64 `protobuf:"varint,5,opt,name=total_err_in,json=totalErrIn,proto3" json:"total_err_in,omitempty"`
	// Total outbound packet errors.
	TotalErrOut uint64 `protobuf:"varint,6,opt,name=total_err_out,json=totalErrOut,proto3" json:"total_err_out,omitempty"`
	// Total inbound packets dropped.
	TotalDropIn uint64 `protobuf:"varint,7,opt,name=total_drop_in,json=totalDropIn,proto3" json:"total_drop_in,omitempty"`
	// Total outbound packets dropped.
	TotalDropOut uint64 `protobuf:"varint,8,opt,name=total_drop_out,json=totalDropOut,proto3" json:"total_drop_out,omitempty"`
	// Total inbound FIFO buffer errors.
	TotalFifoErrIn uint64 `protobuf:"varint,9,opt,name=total_fifo_err_in,json=totalFifoErrIn,proto3" json:"total_fifo_err_in,omitempty"`
	// Total outbound FIFO buffer errors.
	TotalFifoErrOut uint64 `protobuf:"varint,10,opt,name=total_fifo_err_out,json=totalFifoErrOut,proto3" json:"total_fifo_err_out,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NetUsage) Reset() {
	*x = NetUsage{}
	mi := &file_proto_node_metrics_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetUsage) ProtoMessage() {}

func (x *NetUsage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_node_metrics_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetUsage.ProtoReflect.Descriptor instead.
func (*NetUsage) Descriptor() ([]byte, []int) {
	return file_proto_node_metrics_proto_rawDescGZIP(), []int{3}
}

func (x *NetUsage) GetTotalBytesSent() uint64 {
	if x != nil {
		return x.TotalBytesSent
	}
	return 0
}

func (x *NetUsage) GetTotalBytesReceived() uint64 {
	if x != nil {
		return x.TotalBytesReceived
	}
	return 0
}

func (x *NetUsage) GetTotalPacketsSent() uint64 {
	if x != nil {
		return x.TotalPacketsSent
	}
	return 0
}

func (x *NetUsage) GetTotalPacketsReceived() uint64 {
	if x != nil {
		return x.TotalPacketsReceived
	}
	return 0
}

func (x *NetUsage) GetTotalErrIn() uint64 {
	if x != nil {
		return x.TotalErrIn
	}
	return 0
}

func (x *NetUsage) GetTotalErrOut() uint64 {
	if x != nil {
		return x.TotalErrOut
	}
	return 0
}

func (x *NetUsage) GetTotalDropIn() uint64 {
	if x != nil {
		return x.TotalDropIn
	}
	return 0
}

func (x *NetUsage) GetTotalDropOut() uint64 {
	if x != nil {
		return x.TotalDropOut
	}
	return 0
}

func (x *NetUsage) GetTotalFifoErrIn() uint64 {
	if x != nil {
		return x.TotalFifoErrIn
	}
	return 0
}

func (x *NetUsage) GetTotalFifoErrOut() uint64 {
	if x != nil {
		return x.TotalFifoErrOut
	}
	return 0
}

// DiskUsage reports storage statistics for a specific mount point on the system.
// It provides capacity, usage, and file system information.
type DiskUsage struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Device string                 `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	// Mount point of the file system (e.g., "/", "/data").
	Mountpoint string `protobuf:"bytes,2,opt,name=mountpoint,proto3" json:"mountpoint,omitempty"`
	// File system type (e.g., "ext4", "xfs").
	Fstype string `protobuf:"bytes,3,opt,name=fstype,proto3" json:"fstype,omitempty"`
	// Total capacity of the file system in bytes.
	Total uint64 `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
	// Used space in bytes.
	Used uint64 `protobuf:"varint,5,opt,name=used,proto3" json:"used,omitempty"`
	// Free space available to the user in bytes.
	Free uint64 `protobuf:"varint,6,opt,name=free,proto3" json:"free,omitempty"`
	// Percentage of used space (used / total * 100).
	UsedPercent   float64 `protobuf:"fixed64,7,opt,name=used_percent,json=usedPercent,proto3" json:"used_percent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DiskUsage) Reset() {
	*x = DiskUsage{}
	mi := &file_proto_node_metrics_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiskUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskUsage) ProtoMessage() {}

func (x *DiskUsage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_node_metrics_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskUsage.ProtoReflect.Descriptor instead.
func (*DiskUsage) Descriptor() ([]byte, []int) {
	return file_proto_node_metrics_proto_rawDescGZIP(), []int{4}
}

func (x *DiskUsage) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *DiskUsage) GetMountpoint() string {
	if x != nil {
		return x.Mountpoint
	}
	return ""
}

func (x *DiskUsage) GetFstype() string {
	if x != nil {
		return x.Fstype
	}
	return ""
}

func (x *DiskUsage) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *DiskUsage) GetUsed() uint64 {
	if x != nil {
		return x.Used
	}
	return 0
}

func (x *DiskUsage) GetFree() uint64 {
	if x != nil {
		return x.Free
	}
	return 0
}

func (x *DiskUsage) GetUsedPercent() float64 {
	if x != nil {
		return x.UsedPercent
	}
	return 0
}

// DiskIOSummary aggregates disk I/O statistics across all block devices on the node.
// It provides cumulative read/write operations and bytes transferred since boot.
type DiskIOSummary struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Total bytes read from all disks.
	TotalReadBytes uint64 `protobuf:"varint,1,opt,name=total_read_bytes,json=totalReadBytes,proto3" json:"total_read_bytes,omitempty"`
	// Total bytes written to all disks.
	TotalWriteBytes uint64 `protobuf:"varint,2,opt,name=total_write_bytes,json=totalWriteBytes,proto3" json:"total_write_bytes,omitempty"`
	// Total read operations across all disks.
	TotalReadOps uint64 `protobuf:"varint,3,opt,name=total_read_ops,json=totalReadOps,proto3" json:"total_read_ops,omitempty"`
	// Total write operations across all disks.
	TotalWriteOps uint64 `protobuf:"varint,4,opt,name=total_write_ops,json=totalWriteOps,proto3" json:"total_write_ops,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DiskIOSummary) Reset() {
	*x = DiskIOSummary{}
	mi := &file_proto_node_metrics_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiskIOSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskIOSummary) ProtoMessage() {}

func (x *DiskIOSummary) ProtoReflect() protoreflect.Message {
	mi := &file_proto_node_metrics_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskIOSummary.ProtoReflect.Descriptor instead.
func (*DiskIOSummary) Descriptor() ([]byte, []int) {
	return file_proto_node_metrics_proto_rawDescGZIP(), []int{5}
}

func (x *DiskIOSummary) GetTotalReadBytes() uint64 {
	if x != nil {
		return x.TotalReadBytes
	}
	return 0
}

func (x *DiskIOSummary) GetTotalWriteBytes() uint64 {
	if x != nil {
		return x.TotalWriteBytes
	}
	return 0
}

func (x *DiskIOSummary) GetTotalReadOps() uint64 {
	if x != nil {
		return x.TotalReadOps
	}
	return 0
}

func (x *DiskIOSummary) GetTotalWriteOps() uint64 {
	if x != nil {
		return x.TotalWriteOps
	}
	return 0
}

// InterfaceStat describes the state and configuration of a network interface on the node.
type InterfaceStat struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// System-assigned index for the network interface.
	Index int32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// Maximum Transmission Unit (MTU) in bytes.
	Mtu int32 `protobuf:"varint,2,opt,name=mtu,proto3" json:"mtu,omitempty"`
	// Interface name (e.g., "eth0", "lo").
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// MAC address of the interface (e.g., "00:1a:2b:3c:4d:5e").
	HardwareAddr string `protobuf:"bytes,4,opt,name=hardwareAddr,proto3" json:"hardwareAddr,omitempty"`
	// List of operational flags set on the interface (e.g., "up", "broadcast", "loopback").
	Flags []string `protobuf:"bytes,5,rep,name=flags,proto3" json:"flags,omitempty"`
	// IP addresses assigned to the interface, including both IPv4 and IPv6.
	Addrs         []string `protobuf:"bytes,6,rep,name=addrs,proto3" json:"addrs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfaceStat) Reset() {
	*x = InterfaceStat{}
	mi := &file_proto_node_metrics_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfaceStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceStat) ProtoMessage() {}

func (x *InterfaceStat) ProtoReflect() protoreflect.Message {
	mi := &file_proto_node_metrics_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceStat.ProtoReflect.Descriptor instead.
func (*InterfaceStat) Descriptor() ([]byte, []int) {
	return file_proto_node_metrics_proto_rawDescGZIP(), []int{6}
}

func (x *InterfaceStat) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *InterfaceStat) GetMtu() int32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

func (x *InterfaceStat) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InterfaceStat) GetHardwareAddr() string {
	if x != nil {
		return x.HardwareAddr
	}
	return ""
}

func (x *InterfaceStat) GetFlags() []string {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *InterfaceStat) GetAddrs() []string {
	if x != nil {
		return x.Addrs
	}
	return nil
}

// PsiData captures pressure stall information (PSI) for a specific resource type
// such as CPU, memory, or I/O. It quantifies how often and how severely the system
// experienced delays due to contention for that resource.
type PsiData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Cumulative time (in microseconds) that tasks have been stalled due to resource pressure since system boot.
	Total *wrapperspb.UInt64Value `protobuf:"bytes,1,opt,name=total,proto3" json:"total,omitempty"`
	// Rolling average of stall time over the last 10 seconds, expressed as a percentage (0.0–100.0).
	Avg10 *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=avg10,proto3" json:"avg10,omitempty"`
	// Rolling average of stall time over the last 60 seconds, expressed as a percentage (0.0–100.0).
	Avg60 *wrapperspb.DoubleValue `protobuf:"bytes,3,opt,name=avg60,proto3" json:"avg60,omitempty"`
	// Rolling average of stall time over the last 300 seconds, expressed as a percentage (0.0–100.0).
	Avg300        *wrapperspb.DoubleValue `protobuf:"bytes,4,opt,name=avg300,proto3" json:"avg300,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PsiData) Reset() {
	*x = PsiData{}
	mi := &file_proto_node_metrics_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PsiData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PsiData) ProtoMessage() {}

func (x *PsiData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_node_metrics_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PsiData.ProtoReflect.Descriptor instead.
func (*PsiData) Descriptor() ([]byte, []int) {
	return file_proto_node_metrics_proto_rawDescGZIP(), []int{7}
}

func (x *PsiData) GetTotal() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Total
	}
	return nil
}

func (x *PsiData) GetAvg10() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Avg10
	}
	return nil
}

func (x *PsiData) GetAvg60() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Avg60
	}
	return nil
}

func (x *PsiData) GetAvg300() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Avg300
	}
	return nil
}

// PsiMetrics reports pressure stall metrics for a resource in two distinct conditions:
// - 'some': partial contention (some tasks stalled)
// - 'full': total contention (all tasks stalled)
type PsiMetrics struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Represents partial pressure — periods when at least one task was stalled, but others may have progressed.
	Some *PsiData `protobuf:"bytes,1,opt,name=some,proto3" json:"some,omitempty"`
	// Represents full pressure — periods when all non-idle tasks were stalled and no useful work could be done.
	Full          *PsiData `protobuf:"bytes,2,opt,name=full,proto3" json:"full,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PsiMetrics) Reset() {
	*x = PsiMetrics{}
	mi := &file_proto_node_metrics_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PsiMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PsiMetrics) ProtoMessage() {}

func (x *PsiMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_proto_node_metrics_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PsiMetrics.ProtoReflect.Descriptor instead.
func (*PsiMetrics) Descriptor() ([]byte, []int) {
	return file_proto_node_metrics_proto_rawDescGZIP(), []int{8}
}

func (x *PsiMetrics) GetSome() *PsiData {
	if x != nil {
		return x.Some
	}
	return nil
}

func (x *PsiMetrics) GetFull() *PsiData {
	if x != nil {
		return x.Full
	}
	return nil
}

var File_proto_node_metrics_proto protoreflect.FileDescriptor

const file_proto_node_metrics_proto_rawDesc = "" +
	"\n" +
	"\x18proto/node_metrics.proto\x12\ametrics\x1a\x1egoogle/protobuf/wrappers.proto\"\xbf\t\n" +
	"\vNodeMetrics\x12\x1a\n" +
	"\bhostname\x18\x01 \x01(\tR\bhostname\x12?\n" +
	"\fprimary_ipv4\x18\x02 \x01(\v2\x1c.google.protobuf.StringValueR\vprimaryIpv4\x12?\n" +
	"\fprimary_ipv6\x18\x03 \x01(\v2\x1c.google.protobuf.StringValueR\vprimaryIpv6\x12\x16\n" +
	"\x06uptime\x18\x05 \x01(\x04R\x06uptime\x12\x1b\n" +
	"\tboot_time\x18\x06 \x01(\x04R\bbootTime\x12\x14\n" +
	"\x05procs\x18\a \x01(\x04R\x05procs\x12\x0e\n" +
	"\x02os\x18\b \x01(\tR\x02os\x12\x1a\n" +
	"\bplatform\x18\t \x01(\tR\bplatform\x12'\n" +
	"\x0fplatform_family\x18\n" +
	" \x01(\tR\x0eplatformFamily\x12)\n" +
	"\x10platform_version\x18\v \x01(\tR\x0fplatformVersion\x12%\n" +
	"\x0ekernel_version\x18\f \x01(\tR\rkernelVersion\x12\x1f\n" +
	"\vkernel_arch\x18\r \x01(\tR\n" +
	"kernelArch\x12\x17\n" +
	"\ahost_id\x18\x0e \x01(\tR\x06hostId\x120\n" +
	"\x14total_cpu_percentage\x18\x0f \x01(\x01R\x12totalCpuPercentage\x12-\n" +
	"\tcpu_infos\x18\x10 \x03(\v2\x10.metrics.CpuInfoR\bcpuInfos\x12!\n" +
	"\ftotal_memory\x18\x11 \x01(\x04R\vtotalMemory\x12)\n" +
	"\x10available_memory\x18\x12 \x01(\x04R\x0favailableMemory\x12\x1f\n" +
	"\vused_memory\x18\x13 \x01(\x04R\n" +
	"usedMemory\x12(\n" +
	"\x10memory_used_perc\x18\x14 \x01(\x01R\x0ememoryUsedPerc\x12.\n" +
	"\tnet_usage\x18\x15 \x01(\v2\x11.metrics.NetUsageR\bnetUsage\x12E\n" +
	"\x12processes_mem_info\x18\x16 \x03(\v2\x17.metrics.ProcessMemInfoR\x10processesMemInfo\x123\n" +
	"\vdisk_usages\x18\x18 \x03(\v2\x12.metrics.DiskUsageR\n" +
	"diskUsages\x12>\n" +
	"\x0fdisk_io_summary\x18\x19 \x01(\v2\x16.metrics.DiskIOSummaryR\rdiskIoSummary\x12;\n" +
	"\x0fpsi_cpu_metrics\x18\x1a \x01(\v2\x13.metrics.PsiMetricsR\rpsiCpuMetrics\x12A\n" +
	"\x12psi_memory_metrics\x18\x1b \x01(\v2\x13.metrics.PsiMetricsR\x10psiMemoryMetrics\x129\n" +
	"\x0epsi_io_metrics\x18\x1c \x01(\v2\x13.metrics.PsiMetricsR\fpsiIoMetrics\x12E\n" +
	"\x12network_interfaces\x18\x1d \x03(\v2\x16.metrics.InterfaceStatR\x11networkInterfaces\"N\n" +
	"\x0eProcessMemInfo\x12\x10\n" +
	"\x03pid\x18\x01 \x01(\x05R\x03pid\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x16\n" +
	"\x06memory\x18\x03 \x01(\x04R\x06memory\"\xc6\x01\n" +
	"\aCpuInfo\x12\x14\n" +
	"\x05model\x18\x01 \x01(\tR\x05model\x12\x14\n" +
	"\x05cores\x18\x02 \x01(\x05R\x05cores\x12\x10\n" +
	"\x03mhz\x18\x03 \x01(\x05R\x03mhz\x12\x1b\n" +
	"\tvendor_id\x18\x04 \x01(\tR\bvendorId\x12\x1f\n" +
	"\vphysical_id\x18\x05 \x01(\tR\n" +
	"physicalId\x12\x17\n" +
	"\acore_id\x18\x06 \x01(\tR\x06coreId\x12\x10\n" +
	"\x03cpu\x18\a \x01(\x05R\x03cpu\x12\x14\n" +
	"\x05usage\x18\b \x01(\x01R\x05usage\"\xb2\x03\n" +
	"\bNetUsage\x12(\n" +
	"\x10total_bytes_sent\x18\x01 \x01(\x04R\x0etotalBytesSent\x120\n" +
	"\x14total_bytes_received\x18\x02 \x01(\x04R\x12totalBytesReceived\x12,\n" +
	"\x12total_packets_sent\x18\x03 \x01(\x04R\x10totalPacketsSent\x124\n" +
	"\x16total_packets_received\x18\x04 \x01(\x04R\x14totalPacketsReceived\x12 \n" +
	"\ftotal_err_in\x18\x05 \x01(\x04R\n" +
	"totalErrIn\x12\"\n" +
	"\rtotal_err_out\x18\x06 \x01(\x04R\vtotalErrOut\x12\"\n" +
	"\rtotal_drop_in\x18\a \x01(\x04R\vtotalDropIn\x12$\n" +
	"\x0etotal_drop_out\x18\b \x01(\x04R\ftotalDropOut\x12)\n" +
	"\x11total_fifo_err_in\x18\t \x01(\x04R\x0etotalFifoErrIn\x12+\n" +
	"\x12total_fifo_err_out\x18\n" +
	" \x01(\x04R\x0ftotalFifoErrOut\"\xbc\x01\n" +
	"\tDiskUsage\x12\x16\n" +
	"\x06device\x18\x01 \x01(\tR\x06device\x12\x1e\n" +
	"\n" +
	"mountpoint\x18\x02 \x01(\tR\n" +
	"mountpoint\x12\x16\n" +
	"\x06fstype\x18\x03 \x01(\tR\x06fstype\x12\x14\n" +
	"\x05total\x18\x04 \x01(\x04R\x05total\x12\x12\n" +
	"\x04used\x18\x05 \x01(\x04R\x04used\x12\x12\n" +
	"\x04free\x18\x06 \x01(\x04R\x04free\x12!\n" +
	"\fused_percent\x18\a \x01(\x01R\vusedPercent\"\xb3\x01\n" +
	"\rDiskIOSummary\x12(\n" +
	"\x10total_read_bytes\x18\x01 \x01(\x04R\x0etotalReadBytes\x12*\n" +
	"\x11total_write_bytes\x18\x02 \x01(\x04R\x0ftotalWriteBytes\x12$\n" +
	"\x0etotal_read_ops\x18\x03 \x01(\x04R\ftotalReadOps\x12&\n" +
	"\x0ftotal_write_ops\x18\x04 \x01(\x04R\rtotalWriteOps\"\x9b\x01\n" +
	"\rInterfaceStat\x12\x14\n" +
	"\x05index\x18\x01 \x01(\x05R\x05index\x12\x10\n" +
	"\x03mtu\x18\x02 \x01(\x05R\x03mtu\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\"\n" +
	"\fhardwareAddr\x18\x04 \x01(\tR\fhardwareAddr\x12\x14\n" +
	"\x05flags\x18\x05 \x03(\tR\x05flags\x12\x14\n" +
	"\x05addrs\x18\x06 \x03(\tR\x05addrs\"\xdb\x01\n" +
	"\aPsiData\x122\n" +
	"\x05total\x18\x01 \x01(\v2\x1c.google.protobuf.UInt64ValueR\x05total\x122\n" +
	"\x05avg10\x18\x02 \x01(\v2\x1c.google.protobuf.DoubleValueR\x05avg10\x122\n" +
	"\x05avg60\x18\x03 \x01(\v2\x1c.google.protobuf.DoubleValueR\x05avg60\x124\n" +
	"\x06avg300\x18\x04 \x01(\v2\x1c.google.protobuf.DoubleValueR\x06avg300\"X\n" +
	"\n" +
	"PsiMetrics\x12$\n" +
	"\x04some\x18\x01 \x01(\v2\x10.metrics.PsiDataR\x04some\x12$\n" +
	"\x04full\x18\x02 \x01(\v2\x10.metrics.PsiDataR\x04fullB\fZ\n" +
	"/proto/genb\x06proto3"

var (
	file_proto_node_metrics_proto_rawDescOnce sync.Once
	file_proto_node_metrics_proto_rawDescData []byte
)

func file_proto_node_metrics_proto_rawDescGZIP() []byte {
	file_proto_node_metrics_proto_rawDescOnce.Do(func() {
		file_proto_node_metrics_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_node_metrics_proto_rawDesc), len(file_proto_node_metrics_proto_rawDesc)))
	})
	return file_proto_node_metrics_proto_rawDescData
}

var file_proto_node_metrics_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_proto_node_metrics_proto_goTypes = []any{
	(*NodeMetrics)(nil),            // 0: metrics.NodeMetrics
	(*ProcessMemInfo)(nil),         // 1: metrics.ProcessMemInfo
	(*CpuInfo)(nil),                // 2: metrics.CpuInfo
	(*NetUsage)(nil),               // 3: metrics.NetUsage
	(*DiskUsage)(nil),              // 4: metrics.DiskUsage
	(*DiskIOSummary)(nil),          // 5: metrics.DiskIOSummary
	(*InterfaceStat)(nil),          // 6: metrics.InterfaceStat
	(*PsiData)(nil),                // 7: metrics.PsiData
	(*PsiMetrics)(nil),             // 8: metrics.PsiMetrics
	(*wrapperspb.StringValue)(nil), // 9: google.protobuf.StringValue
	(*wrapperspb.UInt64Value)(nil), // 10: google.protobuf.UInt64Value
	(*wrapperspb.DoubleValue)(nil), // 11: google.protobuf.DoubleValue
}
var file_proto_node_metrics_proto_depIdxs = []int32{
	9,  // 0: metrics.NodeMetrics.primary_ipv4:type_name -> google.protobuf.StringValue
	9,  // 1: metrics.NodeMetrics.primary_ipv6:type_name -> google.protobuf.StringValue
	2,  // 2: metrics.NodeMetrics.cpu_infos:type_name -> metrics.CpuInfo
	3,  // 3: metrics.NodeMetrics.net_usage:type_name -> metrics.NetUsage
	1,  // 4: metrics.NodeMetrics.processes_mem_info:type_name -> metrics.ProcessMemInfo
	4,  // 5: metrics.NodeMetrics.disk_usages:type_name -> metrics.DiskUsage
	5,  // 6: metrics.NodeMetrics.disk_io_summary:type_name -> metrics.DiskIOSummary
	8,  // 7: metrics.NodeMetrics.psi_cpu_metrics:type_name -> metrics.PsiMetrics
	8,  // 8: metrics.NodeMetrics.psi_memory_metrics:type_name -> metrics.PsiMetrics
	8,  // 9: metrics.NodeMetrics.psi_io_metrics:type_name -> metrics.PsiMetrics
	6,  // 10: metrics.NodeMetrics.network_interfaces:type_name -> metrics.InterfaceStat
	10, // 11: metrics.PsiData.total:type_name -> google.protobuf.UInt64Value
	11, // 12: metrics.PsiData.avg10:type_name -> google.protobuf.DoubleValue
	11, // 13: metrics.PsiData.avg60:type_name -> google.protobuf.DoubleValue
	11, // 14: metrics.PsiData.avg300:type_name -> google.protobuf.DoubleValue
	7,  // 15: metrics.PsiMetrics.some:type_name -> metrics.PsiData
	7,  // 16: metrics.PsiMetrics.full:type_name -> metrics.PsiData
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_proto_node_metrics_proto_init() }
func file_proto_node_metrics_proto_init() {
	if File_proto_node_metrics_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_node_metrics_proto_rawDesc), len(file_proto_node_metrics_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_node_metrics_proto_goTypes,
		DependencyIndexes: file_proto_node_metrics_proto_depIdxs,
		MessageInfos:      file_proto_node_metrics_proto_msgTypes,
	}.Build()
	File_proto_node_metrics_proto = out.File
	file_proto_node_metrics_proto_goTypes = nil
	file_proto_node_metrics_proto_depIdxs = nil
}
