// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/metrics.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MetricsService_SendMetrics_FullMethodName      = "/metrics.MetricsService/SendMetrics"
	MetricsService_SubscribeMetrics_FullMethodName = "/metrics.MetricsService/SubscribeMetrics"
)

// MetricsServiceClient is the client API for MetricsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// MetricsService defines the bi-directional gRPC interface used to send and receive metrics
// between the agent and the relay or between the relay and external consumers.
type MetricsServiceClient interface {
	// Receives a continuous stream of Metrics messages from agents.
	// The agent opens a stream and sends data periodically (e.g., every 5s).
	SendMetrics(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Metrics, emptypb.Empty], error)
	// Allows a client (e.g., exporter or dashboard) to subscribe to a live stream of metrics.
	// The relay pushes each incoming Metrics message to all subscribers.
	SubscribeMetrics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Metrics], error)
}

type metricsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricsServiceClient(cc grpc.ClientConnInterface) MetricsServiceClient {
	return &metricsServiceClient{cc}
}

func (c *metricsServiceClient) SendMetrics(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Metrics, emptypb.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MetricsService_ServiceDesc.Streams[0], MetricsService_SendMetrics_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Metrics, emptypb.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MetricsService_SendMetricsClient = grpc.ClientStreamingClient[Metrics, emptypb.Empty]

func (c *metricsServiceClient) SubscribeMetrics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Metrics], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MetricsService_ServiceDesc.Streams[1], MetricsService_SubscribeMetrics_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, Metrics]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MetricsService_SubscribeMetricsClient = grpc.ServerStreamingClient[Metrics]

// MetricsServiceServer is the server API for MetricsService service.
// All implementations must embed UnimplementedMetricsServiceServer
// for forward compatibility.
//
// MetricsService defines the bi-directional gRPC interface used to send and receive metrics
// between the agent and the relay or between the relay and external consumers.
type MetricsServiceServer interface {
	// Receives a continuous stream of Metrics messages from agents.
	// The agent opens a stream and sends data periodically (e.g., every 5s).
	SendMetrics(grpc.ClientStreamingServer[Metrics, emptypb.Empty]) error
	// Allows a client (e.g., exporter or dashboard) to subscribe to a live stream of metrics.
	// The relay pushes each incoming Metrics message to all subscribers.
	SubscribeMetrics(*emptypb.Empty, grpc.ServerStreamingServer[Metrics]) error
	mustEmbedUnimplementedMetricsServiceServer()
}

// UnimplementedMetricsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMetricsServiceServer struct{}

func (UnimplementedMetricsServiceServer) SendMetrics(grpc.ClientStreamingServer[Metrics, emptypb.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method SendMetrics not implemented")
}
func (UnimplementedMetricsServiceServer) SubscribeMetrics(*emptypb.Empty, grpc.ServerStreamingServer[Metrics]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMetrics not implemented")
}
func (UnimplementedMetricsServiceServer) mustEmbedUnimplementedMetricsServiceServer() {}
func (UnimplementedMetricsServiceServer) testEmbeddedByValue()                        {}

// UnsafeMetricsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricsServiceServer will
// result in compilation errors.
type UnsafeMetricsServiceServer interface {
	mustEmbedUnimplementedMetricsServiceServer()
}

func RegisterMetricsServiceServer(s grpc.ServiceRegistrar, srv MetricsServiceServer) {
	// If the following call pancis, it indicates UnimplementedMetricsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MetricsService_ServiceDesc, srv)
}

func _MetricsService_SendMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MetricsServiceServer).SendMetrics(&grpc.GenericServerStream[Metrics, emptypb.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MetricsService_SendMetricsServer = grpc.ClientStreamingServer[Metrics, emptypb.Empty]

func _MetricsService_SubscribeMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MetricsServiceServer).SubscribeMetrics(m, &grpc.GenericServerStream[emptypb.Empty, Metrics]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MetricsService_SubscribeMetricsServer = grpc.ServerStreamingServer[Metrics]

// MetricsService_ServiceDesc is the grpc.ServiceDesc for MetricsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "metrics.MetricsService",
	HandlerType: (*MetricsServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendMetrics",
			Handler:       _MetricsService_SendMetrics_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SubscribeMetrics",
			Handler:       _MetricsService_SubscribeMetrics_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/metrics.proto",
}
